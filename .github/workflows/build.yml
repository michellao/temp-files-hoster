name: Build and store artifact
on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'src/**'
      - '*.kts'
      - Dockerfile
      - .github/**
      - 'frontend/**'
env:
  IMAGE_NAME: temp-files-hoster
  PRIVATE_IMAGE_NAME: my-files-hoster
  REGISTRY: ghcr.io
jobs:
  build-private:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    environment: Production
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
        with:
          working-directory: ./frontend
      - run: pnpm install
        working-directory: ./frontend
      - name: Build public frontend
        run: NEXT_TELEMETRY_DISABLED=1 pnpm build
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_SENTRY_DSN: ${{ vars.NEXT_PUBLIC_SENTRY_DSN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
      - name: Copy output frontend to backend
        run: |
          mkdir -p ./src/main/resources/public
          cp -a ./frontend/out/* ./src/main/resources/public
      - uses: ./.github/actions/setup-backend
      - name: Build with Gradle Wrapper
        run: ./gradlew build
      - name: Build image
        run: |
          if [[ $RUNNER_ARCH == "X64" ]]; then
            export PLATFORM="linux/amd64"
          elif [[ $RUNNER_ARCH == "ARM64" ]]; then
            export PLATFORM="linux/arm64"
          fi
          echo $PLATFORM
          docker build --platform "$PLATFORM" --annotation "index,manifest:org.opencontainers.image.description=Simple file transfer with interface" -t $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}" .
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          PRIVATE_IMAGE_ID="$REGISTRY/${{ github.repository_owner }}/$PRIVATE_IMAGE_NAME"
          PRIVATE_IMAGE_ID=$(echo $PRIVATE_IMAGE_ID | tr '[A-Z]' '[a-z]')

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [[ "$VERSION" == "main" ]] && VERSION=latest

          docker tag $PRIVATE_IMAGE_NAME $PRIVATE_IMAGE_ID:$VERSION
          docker push $PRIVATE_IMAGE_ID:$VERSION

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
        with:
          working-directory: ./frontend
      - run: pnpm install
      - name: Build public frontend
        run: NEXT_TELEMETRY_DISABLED=1 pnpm build
      - name: Upload frontend output
        uses: actions/upload-artifact@v4
        with:
          name: frontend-nextjs
          path: |
            ./frontend/out/
  build-backend:
    needs: build-frontend
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-backend
      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-nextjs
          path: ./src/main/resources/public
      - name: Build with Gradle Wrapper
        run: ./gradlew build
      - name: Save artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ runner.arch }}
          path: |
            ./build/libs/shorturl-*.jar
            !./build/libs/shorturl-*-plain.jar
          compression-level: 0
      - name: Build image
        run: |
          if [[ "$RUNNER_ARCH" == "X64" ]]; then
            export PLATFORM="linux/amd64"
          elif [[ "$RUNNER_ARCH" == "ARM64" ]]; then
            export PLATFORM="linux/arm64"
          fi
          docker build --platform "$PLATFORM" --annotation "index,manifest:org.opencontainers.image.description=Simple file transfer with interface" -t $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}" .
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID="$REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME"

          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [[ "$VERSION" == "main" ]] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
