name: Build and store artifact
on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'src/**'
      - '*.kts'
      - Dockerfile
      - .github/**
      - 'frontend/**'
env:
  IMAGE_NAME: temp-files-hoster
  PRIVATE_IMAGE_NAME: my-files-hoster
  REGISTRY: ghcr.io
jobs:
  setup-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.first.outputs.version }}
    steps:
      - id: first
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [[ "$VERSION" == "main" ]] && VERSION=latest
          echo version=$VERSION >> "$GITHUB_OUTPUT"
  build-private:
    needs: setup-version
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    environment: Production
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    outputs:
      private-image-id: ${{ steps.build-image.outputs.private-image-id }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
        with:
          working-directory: ./frontend
      - run: pnpm install
        working-directory: ./frontend
      - name: Build public frontend
        run: NEXT_TELEMETRY_DISABLED=1 pnpm build
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_SENTRY_DSN: ${{ vars.NEXT_PUBLIC_SENTRY_DSN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
      - name: Copy output frontend to backend
        run: |
          mkdir -p ./src/main/resources/public
          cp -a ./frontend/out/* ./src/main/resources/public
      - uses: ./.github/actions/setup-backend
      - name: Build with Gradle Wrapper
        run: ./gradlew build
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
      - id: build-image
        name: Build image and push image
        env:
          VERSION: ${{ needs.setup-version.outputs.version }}
        run: |
          if [[ $RUNNER_ARCH == "X64" ]]; then
            export PLATFORM="linux/amd64"
            export ARCH="amd64"
          elif [[ $RUNNER_ARCH == "ARM64" ]]; then
            export PLATFORM="linux/arm64"
            export ARCH="arm64"
          fi
          
          PRIVATE_IMAGE_ID="$REGISTRY/${{ github.repository_owner }}/$PRIVATE_IMAGE_NAME"
          PRIVATE_IMAGE_ID=$(echo $PRIVATE_IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          docker buildx build --platform "$PLATFORM" \
            -t "$PRIVATE_IMAGE_ID:$VERSION-$ARCH" --push --label "runnumber=${GITHUB_RUN_ID}" .
          
          echo "private-image-id=$PRIVATE_IMAGE_ID" >> "$GITHUB_OUTPUT"

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-frontend
        with:
          working-directory: ./frontend
      - run: pnpm install
      - name: Build public frontend
        run: NEXT_TELEMETRY_DISABLED=1 pnpm build
      - name: Upload frontend output
        uses: actions/upload-artifact@v4
        with:
          name: frontend-nextjs
          path: |
            ./frontend/out/
  build-backend:
    needs:
      - setup-version
      - build-frontend
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    outputs:
      image-id: ${{ steps.build-image.outputs.image-id }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-backend
      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-nextjs
          path: ./src/main/resources/public
      - name: Build with Gradle Wrapper
        run: ./gradlew build
      - name: Save artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ runner.arch }}
          path: |
            ./build/libs/shorturl-*.jar
            !./build/libs/shorturl-*-plain.jar
          compression-level: 0
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
      - id: build-image
        name: Build image and push image
        env:
          VERSION: ${{ needs.setup-version.outputs.version }}
        run: |
          if [[ "$RUNNER_ARCH" == "X64" ]]; then
            export PLATFORM="linux/amd64"
            export ARCH="amd64"
          elif [[ "$RUNNER_ARCH" == "ARM64" ]]; then
            export PLATFORM="linux/arm64"
            export ARCH="arm64"
          fi
          
          IMAGE_ID="$REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME"
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          docker buildx build --platform "$PLATFORM" \
            -t "$IMAGE_ID:$VERSION-$ARCH" --push --label "runnumber=${GITHUB_RUN_ID}" .
          echo "image-id=$IMAGE_ID" >> "$GITHUB_OUTPUT"

  reassemble-image:
    runs-on: ubuntu-latest
    needs:
      - setup-version
      - build-backend
      - build-private
    permissions:
      contents: read
      packages: write
    steps:
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
      - run: |
          echo 'CURL_CMD=curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28"' >> "$GITHUB_ENV"
      - name: Reassemble images in one multi arch image on public package
        env:
          VERSION: ${{ needs.setup-version.outputs.version }}
          IMAGE_ID: ${{ needs.build-backend.outputs.image-id }}
          PRIVATE_IMAGE_ID: ${{ needs.build-private.outputs.private.private-image-id }}
        run: |
          docker buildx imagetools create \
            -t $IMAGE_ID:$VERSION \
            --annotation "org.opencontainers.image.description=Simple file transfer with interface" \
            "$IMAGE_ID:$VERSION-amd64" \
            "$IMAGE_ID:$VERSION-arm64"
          
          LIST_PACKAGES=$(eval $CURL_CMD -L \
            "https://api.github.com/user/packages/container/$IMAGE_NAME/versions")
          
          PACKAGE_AMD64_ID=$(echo -n $LIST_PACKAGES | \
            jq '.[] | select(.metadata.container.tags.[0]=="$VERSION-amd64") | .id')
          
          PACKAGE_ARM64_ID=$(echo -n $LIST_PACKAGES | \
            jq '.[] | select(.metadata.container.tags.[0]=="$VERSION-arm64") | .id')
          
          eval $CURL_CMD -X DELETE \
            "https://api.github.com/user/packages/container/$IMAGE_NAME/versions/$PACKAGE_AMD64_ID"
          
          eval $CURL_CMD -X DELETE \
            "https://api.github.com/user/packages/container/$IMAGE_NAME/versions/$PACKAGE_ARM64_ID"
          
      - name: Reassemble images in one multi arch image on private package
        run: |
          docker buildx imagetools create \
            -t $PRIVATE_IMAGE_ID:$VERSION \
            --annotation "org.opencontainers.image.description=Simple file transfer with interface" \
            "$PRIVATE_IMAGE_ID:$VERSION-amd64" \
            "$PRIVATE_IMAGE_ID:$VERSION-arm64"

          LIST_PRIVATE_PACKAGES=$(eval $CURL_CMD -L \
            "https://api.github.com/user/packages/container/$PRIVATE_IMAGE_NAME/versions")
          
          PACKAGE_AMD64_ID=$(echo -n $LIST_PACKAGES | \
            jq '.[] | select(.metadata.container.tags.[0]=="$VERSION-amd64") | .id')
          
          PACKAGE_ARM64_ID=$(echo -n $LIST_PACKAGES | \
            jq '.[] | select(.metadata.container.tags.[0]=="$VERSION-arm64") | .id')

          eval $CURL_CMD -X DELETE \
            "https://api.github.com/user/packages/container/$PRIVATE_IMAGE_NAME/versions/$PACKAGE_AMD64_ID"
          
          eval $CURL_CMD -X DELETE \
            "https://api.github.com/user/packages/container/$PRIVATE_IMAGE_NAME/versions/$PACKAGE_ARM64_ID"