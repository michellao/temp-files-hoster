name: Build and store artifact
on:
  push:
    branches:
      - main
      - dev
      - frontend
    paths:
      - 'src/**'
      - '*.kts'
      - Dockerfile
      - .github/**
      - 'frontend/**'
env:
  IMAGE_NAME: temp-files-hoster
  PRIVATE_IMAGE_NAME: my-files-hoster
  REGISTRY: ghcr.io
jobs:
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup cache for building frontend
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: ./frontend
      - run: pnpm install
      - name: Build frontend
        run: pnpm build
      - name: Upload frontend output
        uses: actions/upload-artifact@v4
        with:
          name: frontend-nextjs
          path: |
            ./frontend/out/
  build-and-upload:
    needs: build-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: liberica
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/dev' }}
      - name: Set environment variables
        run: |
          echo "AWS_ACCESS_KEY_ID=minioadmin" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=minioadmin" >> $GITHUB_ENV
          echo "AWS_ENDPOINT=http://localhost:9000" >> $GITHUB_ENV
          echo "AWS_REGION=eu-west-1" >> $GITHUB_ENV
      - name: Download frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-nextjs
      - name: Setup local S3
        run: |
          docker run --name minio1 --rm -p 9000:9000 -p 9001:9001 -d minio/minio server /data --console-address ":9001"
          sleep 3
          docker exec minio1 mc alias s local http://localhost:9000 $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
          docker exec minio1 mc mb -p local/shorturl-test
      - name: Build with Gradle Wrapper
        run: ./gradlew build
      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'artifact'
          path: |
            ./build/libs/shorturl-*.jar
            !./build/libs/shorturl-*-plain.jar
          compression-level: 0
      - name: Build image
        run: |
          docker build -t $PRIVATE_IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}" --label "org.opencontainers.image.visibility=private" . &
          docker build -t $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}" .
          wait
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID="$REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME"
          PRIVATE_IMAGE_ID="$REGISTRY/${{ github.repository_owner }}/$PRIVATE_IMAGE_NAME"

          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          PRIVATE_IMAGE_ID=$(echo $PRIVATE_IMAGE_ID | tr '[A-Z]' '[a-z]')

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [[ "$VERSION" == "main" ]] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $PRIVATE_IMAGE_NAME $PRIVATE_IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $PRIVATE_IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
